#!/bin/bash

create_nextjs_app() {
  local DEST=$1
  local PKG_NAME=$2
  local TS_NAME=$3

  echo "ðŸ›  Setting up Web (Next.js) app..."
  
  # Next.js app package.json
  cat > "$DEST/package.json" <<EOL
{
  "name": "$PKG_NAME",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "format": "prettier --write .",
    "test": "vitest run",
    "test:ui": "vitest --ui",
    "clean": "rm -rf .next",
    "type-check": "tsc --noEmit"
  },
  "dependencies": {
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "next": "15.4.2"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4",
    "eslint": "^9",
    "eslint-config-next": "15.4.2",
    "@eslint/eslintrc": "^3",
    "@testing-library/react": "^14",
    "@testing-library/jest-dom": "^6",
    "jsdom": "^24",
    "vitest": "^3"
  }
}
EOL

  pnpm add --filter "$PKG_NAME" next react react-dom
  pnpm add --filter "$PKG_NAME" -D typescript @types/node @types/react @types/react-dom @tailwindcss/postcss tailwindcss eslint eslint-config-next @eslint/eslintrc @testing-library/react @testing-library/jest-dom jsdom vitest
  
  # Create Next.js app directory structure
  mkdir -p "$DEST/src/app"
  mkdir -p "$DEST/public"
  
  # Next.js config
  cat > "$DEST/next.config.ts" <<EOL
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
EOL

  # TypeScript config for Next.js
  cat > "$DEST/tsconfig.json" <<EOL
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
EOL

  # Layout file with Geist fonts
  cat > "$DEST/src/app/layout.tsx" <<EOL
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "$TS_NAME - Next.js App",
  description: "Generated by monokit",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={\`\${geistSans.variable} \${geistMono.variable} antialiased\`}
      >
        {children}
      </body>
    </html>
  );
}
EOL

  # Main page
  cat > "$DEST/src/app/page.tsx" <<EOL
import { add, greet } from '../utils';

export default function Home() {
  const result = add(2, 3);
  const greeting = greet('Next.js User');

  return (
    <div className="font-sans grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20">
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
        <h1 className="text-4xl font-bold">
          Hello from $TS_NAME Next.js app!
        </h1>
        <div className="space-y-4">
          <p className="text-lg">
            <strong>2 + 3 = {result}</strong>
          </p>
          <p className="text-lg">{greeting}</p>
        </div>
      </main>
    </div>
  );
}
EOL

  # Global CSS with Tailwind 4
  cat > "$DEST/src/app/globals.css" <<EOL
@import "tailwindcss";

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
EOL

  # Create utils file with functions
  cat > "$DEST/src/utils.ts" <<EOL
/**
 * Adds two numbers together
 * @param a - First number
 * @param b - Second number
 * @returns The sum of a and b
 */
export const add = (a: number, b: number): number => {
  return a + b;
};

/**
 * Greets a person by name
 * @param name - The name to greet
 * @returns A greeting message
 */
export const greet = (name: string): string => {
  return \`Hello, \${name}!\`;
};
EOL

  # API route
  mkdir -p "$DEST/src/app/api/hello"
  cat > "$DEST/src/app/api/hello/route.ts" <<EOL
import { NextResponse } from 'next/server';
import { add, greet } from '../../../utils';

export async function GET() {
  return NextResponse.json({ 
    message: 'Hello from $TS_NAME API!',
    example: add(2, 3),
    greeting: greet('API User')
  });
}

export async function POST(request: Request) {
  try {
    const { a, b } = await request.json();
    
    if (typeof a !== 'number' || typeof b !== 'number') {
      return NextResponse.json(
        { error: 'Both a and b must be numbers' },
        { status: 400 }
      );
    }
    
    return NextResponse.json({ result: add(a, b) });
  } catch (error) {
    return NextResponse.json(
      { error: 'Invalid JSON' },
      { status: 400 }
    );
  }
}
EOL

  # ESLint config for Next.js
  cat > "$DEST/eslint.config.mjs" <<EOL
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
EOL

  # Vitest config for Next.js
  cat > "$DEST/vitest.config.ts" <<EOL
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./src/__tests__/setup.ts'],
  },
});
EOL

  # Create test folder and test file
  mkdir -p "$DEST/src/__tests__"
  
  # Test setup file
  cat > "$DEST/src/__tests__/setup.ts" <<EOL
import '@testing-library/jest-dom';
EOL

  cat > "$DEST/src/__tests__/utils.test.ts" <<EOL
import { describe, it, expect } from 'vitest';
import { add, greet } from '../utils';

describe('$TS_NAME utils', () => {
  describe('add', () => {
    it('should add two positive numbers', () => {
      expect(add(2, 3)).toBe(5);
    });

    it('should add negative numbers', () => {
      expect(add(-1, -2)).toBe(-3);
    });

    it('should add zero', () => {
      expect(add(5, 0)).toBe(5);
    });
  });

  describe('greet', () => {
    it('should greet a person by name', () => {
      expect(greet('Alice')).toBe('Hello, Alice!');
    });

    it('should handle empty string', () => {
      expect(greet('')).toBe('Hello, !');
    });
  });
});
EOL

  # Create Next.js page test
  cat > "$DEST/src/__tests__/page.test.tsx" <<EOL
import { describe, it, expect } from 'vitest';
import { render, screen } from '@testing-library/react';
import Home from '../app/page';

describe('Home', () => {
  it('renders the app title', () => {
    render(<Home />);
    expect(screen.getByText(/Hello from $TS_NAME Next.js app!/)).toBeInTheDocument();
  });

  it('displays the calculation result', () => {
    render(<Home />);
    expect(screen.getByText('2 + 3 = 5')).toBeInTheDocument();
  });

  it('displays the greeting', () => {
    render(<Home />);
    expect(screen.getByText('Hello, Next.js User!')).toBeInTheDocument();
  });
});
EOL

  echo "âœ… Next.js app created successfully"
} 